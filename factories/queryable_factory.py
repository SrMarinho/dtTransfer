from entities import *
from config.logger.logging import logger

class QueryableFactory:
    @staticmethod
    def getInstance(queryName, params):
        entities_list = {
            'titulos_com_notas': TitulosComNotas,
            'configuracoes_ol': ConfiguracoesOl,
            'configuracoes_ol_excecoes': ConfiguracoesOlExcecoes,
            'configuracoes_ol_excecoes_clientes': ConfiguracoesOlExcecoesClientes,
            'configuracoes_ol_excecoes_descontos': ConfiguracoesOlExcecoesDescontos,
            'configuracoes_ol_excecoes_marcas': ConfiguracoesOlExcecoesMarcas,
            'configuracoes_ol_excecoes_ols': ConfiguracoesOlExcecoesOls,
            'configuracoes_ol_excecoes_produtos': ConfiguracoesOlExcecoesProdutos,
            'configuracoes_ol_excecoes_unidades': ConfiguracoesOlExcecoesUnidades,
            'identificadores': Identificadores,
            'grupos_clientes': GruposClientes,
            'vans_projetos': VansProjetos,
            'clientes_redes': ClientesRedes,
            'tipos_acoes_descontos_ol': TiposAcoesDescontosOl,
            'titulos_contas_receber': TitulosContasReceber,
            'acompanhamento_solicitacoes_compras': AcompanhamentoSolicitacoesCompras,
            'f_folha_visao_contabil': FfolhaVisaoContabil,
            'estoque_usu_consumo': EstoqueUsuConsumo,
            'titulos_sem_notas': TitulosSemNotas,
            'f_titulos_com_notas_servicos': FtitulosComNotasServicos,
            'f_titulos_com_notas_produtos': FTitulosComNotasProdutos,
            'plano_contas_contabeis': PlanoContasContabeis,
            'folha_controladoria': FolhaControladoria,
            'd_filiais': Dfiliais,
            'd_custos': Dcusto,
            'd_historico_filial': DhistoricoFilial,
            'd_eventos': DEventos,
            'f_mapear_contas_lanc_contabil': FMapearContasLancContabil,
            'rescisoes': Rescisoes,
            'fgts_sem_rescisoes': FgtsSemRescisoes,
            'pedidos_vendas_produtos': PedidosVendasProdutos,
            'acompanhamento_solicitacoes_compras_eng_globo': AcompanhamentoSolicitacoesComprasEngGlobo,
            'conferencia_de_tributacao_de_produtos': ConferenciaDeTributacaoDeProdutos,
            'conciliacao_bancaria': ConciliacaoBancaria,
            'titulos_contas_pagar': TitulosContasPagar,
            'espelho': Espelho,
            'f_folha_visao_dp': FFolhaVisaoDp,
            'banco_horas': BancoHoras,
            'ajuste_ponto': AjustePonto,
            'marcacoes_ponto': MarcacoesPonto,
            'acompanhamento_orcamento_compras': AcompanhamentoOrcamentoCompras,
            'grupos_tributarios_entrada': GruposTributariosEntrada,
            'grupos_tributarios_entrada_parametros': GruposTributariosEntradaParametros,
            'produto': Produto,
            'grupos_tributarios': GruposTributarios,
            'grupos_tributarios_parametros': GruposTributariosParametros,
            'grupos_compras': GruposCompras,
            'cfop_fiscal': CfopFiscal,
            'venda': Venda,
            'notas_canceladas': NotasCanceladas,
            'pedidos_vendas': PedidosVendas,
            'campanhas': Campanhas,
            'campanhas_empresas': CampanhasEmpresas,
            'campanhas_participantes': CampanhasParticipantes,
            'vendas_imagem': VendasImagem,
            'metas_vendas': MetasVendas,
            'metas_vendas_empresas': MetasVendasEmpresas,
            'metas_vendas_vendedores': MetasVendasVendedores,
            'wms_follow_tempos_checkout': WmsFollowTemposCheckout,
            'wms_follow_separacoes_data_tipo_produtos': WmsFollowSeparacoesDataTipoProdutos,
            'cliente': Cliente,
            'cliente_vendedor': ClienteVendedor,
            'nf_compra': NfCompra,
            'nf_compra_produtos': NfCompraProdutos,
            'pedidos_compras_produtos': PedidosComprasProdutos,
            'produtos_endereco': ProdutosEndereco,
            'titulos_edocs': TitulosEdocs,
            'laboratorios': Laboratorios,
            'recebimentos_volumes': RecebimentosVolumes,
            'afastamento_colaboradores': AfastamentoColaboradores,
            'recebimentos_volumes_nf': RecebimentoVolumesNf,
            'vendas_boletos': VendasBoletos,
            'fretes_pagar_periodo_analitico': FretesPagarPeriodoAnalitico,
            'vendedores_procfit': VendedoresProcfit,
            'titulos_contas_receber_por_geracao': TitulosContasReceberPorGeracao,
            'configuracoes_ol_marcas': ConfiguracoesOlMarcas,
            'fornecedores_descontos': FornecedoresDescontos,
            'fornecedores_descontos_empresas': FornecedoresDescontosEmpresas,
            'fornecedores_descontos_grupos': FornecedoresDescontosGrupos,
            'fornecedores_descontos_importacoes': FornecedoresDescontosImportacoes,
            'fornecedores_descontos_marcas': FornecedoresDescontosMarcas,
            'fornecedores_descontos_produtos': FornecedoresDescontosProdutos,
            'fornecedores_descontos_secoes': FornecedoresDescontosSecoes,
            'vendas_feira': VendasFeira
        }

        if queryName in entities_list:
            return entities_list[queryName](params)

        logger.info(f"Tabela {queryName} não registrada!")
        raise ValueError(f"Tabela {queryName} não registrada!")
